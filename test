@Library('sfdi-devops-tools-infra') _

pipeline {
    agent any
    environment {
        pgdb_credid = "${env.BRANCH_NAME}_pgdb_credid_ui"
        pgdb_url = "${getProperty("${env.BRANCH_NAME}_pfzalgn_pgdb_url")}"
        pgdb_changeLogFile = "Backend/grw/postgres/changelog.pg.xml"
        unix_server = "${getProperty("${env.BRANCH_NAME}_pfzalgn_unix_server")}"
        // unix source paths for grw
        unix_src_path_cdw = "Backend/grw/unix/scripts/CDW_CUST"
        unix_src_path_dl = "Backend/grw/unix/scripts/DL_PROCESSOR"
        unix_src_path_grw = "Backend/grw/unix/scripts/PA_GRW"
        unix_src_path_grw_shr = "Backend/grw/unix/scripts/PA_GRW_SHARED"
        unix_src_path_uc4 = "Backend/grw/unix/scripts/UC4"
        unix_src_path_pa_ups = "Backend/grw/unix/scripts/PA_UPSTREAM"
        unix_param_path_grw = "Backend/grw/unix/paramfiles/PA_GRW"
        // unix source path for upstream
        unix_upsrc_path = "Backend/grw/unix/upscripts"
        unix_upsrcfls_path = "Backend/grw/unix/upfiles"
        // unix target path for upstream
        unix_deploy_path_upsrc = "/dt_pfizeraligndata/${env.BRANCH_NAME}/Scripts/PA_UPSTREAM"
        unix_deploy_path_upsrcfls = "/dt_pfizeraligndata/${env.BRANCH_NAME}/SrcFiles/PA_UPSTREAM/Customer_Refresh"
        // unix target path for grw
        unix_deploy_path_cdw = "/dt_pfizeraligndata/${env.BRANCH_NAME}/Scripts/CDW_CUST"
        unix_deploy_path_dl= "/dt_pfizeraligndata/${env.BRANCH_NAME}/Scripts/DL_PROCESSOR"
        unix_deploy_path_grw = "/dt_pfizeraligndata/${env.BRANCH_NAME}/Scripts/PA_GRW"
        unix_deploy_path_grw_shr = "/dt_pfizeraligndata/${env.BRANCH_NAME}/Scripts/PA_GRW_SHARED"
        unix_deploy_path_uc4 = "/dt_pfizeraligndata/${env.BRANCH_NAME}/Scripts/UC4"
        unix_deploy_path_pa_ups = "/dt_pfizeraligndata/${env.BRANCH_NAME}/Scripts/PA_UPSTREAM"
        unix_deploy_path_par_grw = "/dt_pfizeraligndata/${env.BRANCH_NAME}/ParamFiles/PA_GRW"        
        unix_service_account = "srvamr-sfaops"
        snowflake_changeLogFile_COMETL_CONTROL__db = "Backend/grw/snowflake/COMETL_CONTROL/changelog.sf.xml"
        snowflake_changeLogFile_COMETL_PA__db = "Backend/grw/snowflake/COMETL_PA/changelog.sf.xml"
        snowflake_COMETL_CONTROL__db_url = "${getProperty("${env.BRANCH_NAME}_pfzalgn_snowflake_COMETL_CONTROL_db_url_grw")}"
        snowflake_COMETL_PA__db_url = "${getProperty("${env.BRANCH_NAME}_pfzalgn_snowflake_COMETL_PA_db_url_grw")}"
        snowflake_credid_COMETL_CONTROL = "${env.BRANCH_NAME}_pfzalgn_COMETL_CONTROL_snowflake_credid_grw"
        snowflake_credid_COMETL_PA = "${env.BRANCH_NAME}_pfzalgn_COMETL_PA_snowflake_credid_grw"
        unix_permission = "775"
    }
    parameters {
        choice choices: ['No', 'Yes'], description: 'Mention if You want to Deploy into PostgreSQL Environment', name: 'Deploy_to_PostgreSQL'
        choice choices: ['No', 'Yes'], description: 'Mention if You want to Deploy into Unix Environment', name: 'Deploy_to_Unix'
        choice choices: ['No', 'Yes'], description: 'Mention if You want to Deploy into Snowflake Environment', name: 'Deploy_to_Snowflake_COMETL_CONTROL'
        choice choices: ['No', 'Yes'], description: 'Mention if You want to Deploy into Snowflake Environment', name: 'Deploy_to_Snowflake_COMETL_PA'
        choice choices: ['Yes', 'No'], description: 'Mention if You want to Dry Run', name: 'dry_run'
        choice choices: ['No', 'Yes'], description: 'If you want to send alerts', name: 'Email_Alert'
        string defaultValue: 'None', description: 'Provide the comma separated Email addresses.', name: 'Notify_to'
    }
    stages{
        stage("Approval for Prod"){
            when {
                expression { "${env.BRANCH_NAME}" == "main" }
            }
            steps{
                script{
                    email_approval()
                }
            }
        }
        stage ("Deploy to PostgreSQL"){
            when {
                 expression { params.Deploy_to_PostgreSQL == "Yes" }
            }
            steps{
                script{
                        println "Deploying into PostgreSQL ${env.BRANCH_NAME} environment"
                        postgresql_deploy(url: pgdb_url, cred: pgdb_credid, changelog: pgdb_changeLogFile, dry_run: dry_run)
                    }
                }
        }
        stage ("Deploy to Unix"){
            when {
                 expression { params.Deploy_to_Unix == "Yes" }
            }
                steps{
                    script{
                        unix_deploy(src: unix_src_path_cdw, dest: unix_deploy_path_cdw, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_src_path_dl, dest: unix_deploy_path_dl, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_src_path_grw, dest: unix_deploy_path_grw, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_src_path_grw_shr, dest: unix_deploy_path_grw_shr, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_src_path_uc4, dest: unix_deploy_path_uc4, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_param_path_grw, dest: unix_deploy_path_par_grw, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_src_path_pa_ups, dest: unix_deploy_path_pa_ups, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_upsrc_path, dest: unix_deploy_path_upsrc, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        unix_deploy(src: unix_upsrcfls_path, dest: unix_deploy_path_upsrcfls, server: unix_server, service_account: unix_service_account, permissions: unix_permission)
                        }
                }
        }
        stage ("Deploy to Snowflake Datbase - COMETL_CONTROL"){
            when {
                 expression { params.Deploy_to_Snowflake_COMETL_CONTROL == "Yes" }
            }
                steps{
                    script{
                        println "Deploying into COMETL_CONTROL ${env.BRANCH_NAME} environment"
                        snowflake_deploy(url: snowflake_COMETL_CONTROL__db_url, cred: snowflake_credid_COMETL_CONTROL, changelog: snowflake_changeLogFile_COMETL_CONTROL__db, dry_run: dry_run) 
                        }
                }
        }
        stage ("Deploy to Snowflake Datbase - COMETL_PA"){
            when {
                 expression { params.Deploy_to_Snowflake_COMETL_PA == "Yes" }
            }
                steps{
                    script{
                        println "Deploying into COMETL_PA ${env.BRANCH_NAME} environment"
                        snowflake_deploy(url: snowflake_COMETL_PA__db_url, cred: snowflake_credid_COMETL_PA, changelog: snowflake_changeLogFile_COMETL_PA__db, dry_run: dry_run)
                        }
                }
        }
    }
     post {
        failure {
            notification_email(Email_Alert: Email_Alert, Notify_to: Notify_to) 
        }
        success {
            notification_email(Email_Alert: Email_Alert, Notify_to: Notify_to)
        }
    }
}
